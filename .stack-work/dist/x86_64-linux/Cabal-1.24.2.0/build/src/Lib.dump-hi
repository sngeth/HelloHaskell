
==================== FINAL INTERFACE ====================
2017-07-19 00:54:23.968164 UTC

interface HelloHaskell-0.1.0.0-76qgaguAzZIJG6rGeWCh4M:Lib 8002
  interface hash: 448fbbb163b64a688db90f2b2419d2f8
  ABI hash: c2d55bacd58030f8c4abef87289ad643
  export-list hash: 79e61862b9385d19b5f14826ef7da458
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ab396f11155bd696ab63895436e6f1df
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.sayHello
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO e4a64a8e3dce8616da54f0ee7104f7db
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
0460a5b0637cb4b697dd3d4b54066b84
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Lib.$trModule2 Lib.$trModule1) -}
2626cabf2780fc5146da81ba86db77b0
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Lib"#) -}
e7a67cf7ca3172858961cde06ca70b32
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "HelloHaskell-0.1.0.0-76qgaguAzZIJG6rGeWCh4M"#) -}
78a45fdcf8c69cb8395de6c9feaccc2f
  sayHello :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.sayHello1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
ec01fa0e02b88cd3766320a1f33cbf99
  sayHello1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Lib.sayHello3
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (GHC.CString.unpackAppendCString#
                      "Hello, "#
                      (GHC.Base.++ @ GHC.Types.Char ipv3 Lib.sayHello2))
                   GHC.Types.True
                   ipv2 } }) -}
4bae837aff97ae97ab6406ab3761b48d
  sayHello2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   ", nice to meet you!"#) -}
ff635159d1c381167dd9e0ae20940d83
  sayHello3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "What is your name?"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

